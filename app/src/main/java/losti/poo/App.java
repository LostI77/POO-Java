/*
 * This source file was generated by the Gradle 'init' task
 */
package losti.poo;

import losti.poo.Inheritance.C;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        // Class de ejemplo
        Class exampleClass = new Class("my-id", "losti", "esta es mi description");
        // Accediendo a atributos publicos;
        System.out.println(exampleClass.name);
        System.out.println(exampleClass.description);
        // Metodos;
        System.out.println(exampleClass.getId());

        /*
         * Clase de ejemplo de herencia
         * Como estamos usando una clase que esta dentro de otra clase tenemos que
         * primero crear una instancia de esta clase Inheritance / herencia
         * para luego poder acceder y crear una nueva clase llamada c de la clase C
         * 
         * Luego de eso podremos tener su comportamiento normal como lo creamos.
         * 
         * Inheritance inheritanceInstance = new Inheritance();
         * C c = inheritanceInstance.new C("Lost", "default", 18, "Sudamerica", "Peru",
         * "No");
         * 
         * c.printlnAllData(); // <- Metodo de la clase C
         * c.printlnPrivateData(); // <- Metodo de la clase D en la clase C
         * 
         * 🔥 No descomentar esto
         * 
         * !! ESTO SIEMPRE SERA DE ESTA FORMA AMENOS QUE LAS CLASES DENTRO DE
         * Inheritance NO SEAN ESTATICAS ESTE EJEMPLO ES CON CLASES ESTATICAS !!
         * 
         * ⬇️ Este funciona
         */

        C c = new Inheritance.C("Lost", "default", 18, "Sudamerica", "Peru", "No");

        c.printlnAllData(); // <- Metodo de la clase C
        c.printlnPrivateData(); // <- Metodo de la clase D en la clase C
    }
}
